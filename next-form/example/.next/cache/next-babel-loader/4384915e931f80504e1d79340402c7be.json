{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { v4 } from 'uuid';\nimport { assertOnServer } from '../../dist';\nassertOnServer('db.ts');\nconst db = {\n  posts: [{\n    id: '00000000-0000-0000-0000-000000000001',\n    message: 'hello',\n    from: 'alexdotjs',\n    createdAt: new Date(2020, 12, 26).toJSON()\n  }]\n};\nconst SLACK_WEBHOOK = process.env.SLACK_WEBHOOK;\n\nasync function postToSlack(post) {\n  if (!SLACK_WEBHOOK) {\n    console.log('No webhook setup - not posting to slack');\n    return;\n  }\n\n  try {\n    fetch(SLACK_WEBHOOK, {\n      method: 'post',\n      body: JSON.stringify({\n        blocks: [{\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: `*From _${post.from}_*:\\n${post.message}`\n          }\n        }]\n      }),\n      headers: {\n        'Content-type': 'application/json'\n      }\n    });\n    console.log('Posted to slack');\n  } catch (err) {\n    console.error('Post to slack failed', err);\n  }\n}\n\nexport let DB;\n\n(function (_DB) {\n  async function getAllPosts() {\n    return db.posts;\n  }\n\n  _DB.getAllPosts = getAllPosts;\n\n  async function createPost(input) {\n    const post = _objectSpread(_objectSpread({}, input), {}, {\n      id: v4(),\n      createdAt: new Date().toJSON()\n    });\n\n    db.posts.push(post);\n    await postToSlack(input);\n    return post;\n  }\n\n  _DB.createPost = createPost;\n})(DB || (DB = {}));","map":{"version":3,"sources":["/Users/alex/dev/js-is-php/next-form/example/utils/db.ts"],"names":["v4","assertOnServer","db","posts","id","message","from","createdAt","Date","toJSON","SLACK_WEBHOOK","process","env","postToSlack","post","console","log","fetch","method","body","JSON","stringify","blocks","type","text","headers","err","error","getAllPosts","createPost","input","push","DB"],"mappings":";;;;;;AAAA,SAASA,EAAT,QAAmB,MAAnB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACAA,cAAc,CAAC,OAAD,CAAd;AAEA,MAAMC,EAAE,GAAG;AACTC,EAAAA,KAAK,EAAE,CACL;AACEC,IAAAA,EAAE,EAAE,sCADN;AAEEC,IAAAA,OAAO,EAAE,OAFX;AAGEC,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,SAAS,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB,EAAuBC,MAAvB;AAJb,GADK;AADE,CAAX;AAWA,MAAMC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYF,aAAlC;;AAGA,eAAeG,WAAf,CAA2BC,IAA3B,EAA4C;AAC1C,MAAI,CAACJ,aAAL,EAAoB;AAClBK,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA;AACD;;AACD,MAAI;AACFC,IAAAA,KAAK,CAACP,aAAD,EAAgB;AACnBQ,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE,SADR;AAEEC,UAAAA,IAAI,EAAE;AACJD,YAAAA,IAAI,EAAE,QADF;AAEJC,YAAAA,IAAI,EAAG,UAASV,IAAI,CAACR,IAAK,QAAOQ,IAAI,CAACT,OAAQ;AAF1C;AAFR,SADM;AADW,OAAf,CAFa;AAanBoB,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAbU,KAAhB,CAAL;AAiBAV,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,GAnBD,CAmBE,OAAOU,GAAP,EAAY;AACZX,IAAAA,OAAO,CAACY,KAAR,CAAc,sBAAd,EAAsCD,GAAtC;AACD;AACF;;AACD;;;AACS,iBAAeE,WAAf,GAA6B;AAClC,WAAO1B,EAAE,CAACC,KAAV;AACD;;;;AAEM,iBAAe0B,UAAf,CAA0BC,KAA1B,EAA4C;AACjD,UAAMhB,IAAI,mCAAQgB,KAAR;AAAe1B,MAAAA,EAAE,EAAEJ,EAAE,EAArB;AAAyBO,MAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,MAAX;AAApC,MAAV;;AAEAP,IAAAA,EAAE,CAACC,KAAH,CAAS4B,IAAT,CAAcjB,IAAd;AACA,UAAMD,WAAW,CAACiB,KAAD,CAAjB;AACA,WAAOhB,IAAP;AACD;;;GAXWkB,E,KAAAA,E","sourcesContent":["import { v4 } from 'uuid';\nimport { assertOnServer } from '../../dist';\nassertOnServer('db.ts');\n\nconst db = {\n  posts: [\n    {\n      id: '00000000-0000-0000-0000-000000000001',\n      message: 'hello',\n      from: 'alexdotjs',\n      createdAt: new Date(2020, 12, 26).toJSON(),\n    },\n  ],\n};\n\nconst SLACK_WEBHOOK = process.env.SLACK_WEBHOOK;\n\ntype PostInput = Omit<typeof db['posts'][number], 'id' | 'createdAt'>;\nasync function postToSlack(post: PostInput) {\n  if (!SLACK_WEBHOOK) {\n    console.log('No webhook setup - not posting to slack');\n    return;\n  }\n  try {\n    fetch(SLACK_WEBHOOK, {\n      method: 'post',\n      body: JSON.stringify({\n        blocks: [\n          {\n            type: 'section',\n            text: {\n              type: 'mrkdwn',\n              text: `*From _${post.from}_*:\\n${post.message}`,\n            },\n          },\n        ],\n      }),\n      headers: {\n        'Content-type': 'application/json',\n      },\n    });\n    console.log('Posted to slack');\n  } catch (err) {\n    console.error('Post to slack failed', err);\n  }\n}\nexport module DB {\n  export async function getAllPosts() {\n    return db.posts;\n  }\n\n  export async function createPost(input: PostInput) {\n    const post = { ...input, id: v4(), createdAt: new Date().toJSON() };\n\n    db.posts.push(post);\n    await postToSlack(input);\n    return post;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}