{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alex/dev/js-is-php/next-form/example/pages/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ProgressBar } from 'components/ProgressBar';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { useState } from 'react';\nimport { createForm } from 'next-form';\nimport { prettyDate } from 'utils/prettyDate';\nimport * as z from 'zod';\nimport { DB } from '../utils/db';\nexport const createPostForm = createForm({\n  schema: z.object({\n    from: z.string().min(2),\n    message: z.string().min(4)\n  }),\n  defaultValues: {\n    message: '',\n    from: ''\n  },\n  formId: 'createPost'\n});\nexport default function Home(props) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(props.posts);\n  const {\n    0: feedback,\n    1: setFeedback\n  } = useState(createPostForm.getFeedbackFromProps(props));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Formik \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"noscript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Uses Formik to HTTP post to Next.js' special page endpoint (\", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"_next/data/[..]/[..].json\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), \") then re-renders the\", ' ', /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), \" from the response\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This page works without JavaScript enabled!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My guestbook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), posts.map(item => /*#__PURE__*/_jsxDEV(\"article\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"From \", item.from, \" at \", prettyDate(item.createdAt), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: item.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: createPostForm.getInitialValues(props),\n      initialErrors: createPostForm.getInitialErrors(props),\n      initialTouched: createPostForm.getInitialTouched(props),\n      validate: createPostForm.formikValidator,\n      onSubmit: async (values, actions) => {\n        try {\n          var _newProps$createPost$;\n\n          setFeedback(null);\n          const {\n            newProps\n          } = await createPostForm.clientRequest({\n            values,\n            props\n          });\n          const feedback = createPostForm.getFeedbackFromProps(newProps);\n\n          if (!feedback) {\n            throw new Error(\"Didn't receive feedback from props\");\n          }\n\n          if ((_newProps$createPost$ = newProps.createPost.response) === null || _newProps$createPost$ === void 0 ? void 0 : _newProps$createPost$.success) {\n            console.log('added post with id', newProps.createPost.response.data.id);\n          }\n\n          setFeedback(feedback);\n\n          if (feedback.state === 'success') {\n            setPosts(newProps.posts); // refresh posts\n\n            actions.resetForm();\n          }\n        } catch (error) {\n          setFeedback({\n            state: 'error',\n            error\n          });\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        method: \"post\",\n        action: props.createPost.endpoints.action,\n        children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n          loading: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"from\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            name: \"from\",\n            disabled: isSubmitting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"from\",\n            component: \"span\",\n            className: \"field__error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"message\",\n            children: \"Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"textarea\",\n            name: \"message\",\n            as: \"textarea\",\n            disabled: isSubmitting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"message\",\n            component: \"span\",\n            className: \"field__error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isSubmitting,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), (feedback === null || feedback === void 0 ? void 0 : feedback.state) === 'success' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"feedback success\",\n          children: \"Yay! Your entry was added\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this), (feedback === null || feedback === void 0 ? void 0 : feedback.state) === 'error' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"feedback error\",\n            children: [\"Something went wrong: \", feedback.error.message, \". Full Error:\", ' ', /*#__PURE__*/_jsxDEV(\"pre\", {\n              children: JSON.stringify(_objectSpread(_objectSpread({}, feedback.error), {}, {\n                message: feedback.error.message,\n                stack: feedback.error.stack\n              }), null, 4)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this)\n        }, void 0, false), isSubmitting && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"feedback\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getServerSideProps = async ctx => {\n  const createPostProps = await createPostForm.getPageProps({\n    ctx,\n\n    async mutation(input) {\n      if (Math.random() < 0.3) {\n        throw new Error('Emulating the mutation failing');\n      }\n\n      return DB.createPost(input);\n    }\n\n  });\n  return {\n    props: _objectSpread(_objectSpread({}, createPostProps), {}, {\n      posts: await DB.getAllPosts()\n    })\n  };\n};","map":{"version":3,"sources":["/Users/alex/dev/js-is-php/next-form/example/pages/index.tsx"],"names":["ProgressBar","ErrorMessage","Field","Form","Formik","useState","createForm","prettyDate","z","DB","createPostForm","schema","object","from","string","min","message","defaultValues","formId","Home","props","posts","setPosts","feedback","setFeedback","getFeedbackFromProps","map","item","createdAt","id","getInitialValues","getInitialErrors","getInitialTouched","formikValidator","values","actions","newProps","clientRequest","Error","createPost","response","success","console","log","data","state","resetForm","error","isSubmitting","endpoints","action","JSON","stringify","stack","getServerSideProps","ctx","createPostProps","getPageProps","mutation","input","Math","random","getAllPosts"],"mappings":"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","sourcesContent":["import { ProgressBar } from 'components/ProgressBar';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { GetServerSidePropsContext, InferGetServerSidePropsType } from 'next';\nimport { useRouter } from 'next/dist/client/router';\nimport { useState } from 'react';\nimport { createForm } from 'next-form';\nimport { prettyDate } from 'utils/prettyDate';\nimport * as z from 'zod';\nimport { DB } from '../utils/db';\n\nexport const createPostForm = createForm({\n  schema: z.object({\n    from: z.string().min(2),\n    message: z.string().min(4),\n  }),\n  defaultValues: {\n    message: '',\n    from: '',\n  },\n  formId: 'createPost',\n});\n\ntype Props = InferGetServerSidePropsType<typeof getServerSideProps>;\n\nexport default function Home(props: Props) {\n  const [posts, setPosts] = useState(props.posts);\n  const [feedback, setFeedback] = useState(\n    createPostForm.getFeedbackFromProps(props)\n  );\n\n  return (\n    <>\n      <h1>\n        Formik <code>noscript</code>\n      </h1>\n      <p>\n        Uses Formik to HTTP post to Next.js' special page endpoint (\n        <code>_next/data/[..]/[..].json</code>) then re-renders the{' '}\n        <code>posts</code> from the response\n      </p>\n      <p>This page works without JavaScript enabled!</p>\n\n      <h2>My guestbook</h2>\n      {posts.map(item => (\n        <article key={item.id}>\n          <strong>\n            From {item.from} at {prettyDate(item.createdAt)}:\n          </strong>\n          <p className=\"message\">{item.message}</p>\n        </article>\n      ))}\n      <h3>Add post</h3>\n\n      <Formik\n        initialValues={createPostForm.getInitialValues(props)}\n        initialErrors={createPostForm.getInitialErrors(props)}\n        initialTouched={createPostForm.getInitialTouched(props)}\n        validate={createPostForm.formikValidator}\n        onSubmit={async (values, actions) => {\n          try {\n            setFeedback(null);\n            const { newProps } = await createPostForm.clientRequest({\n              values,\n              props,\n            });\n\n            const feedback = createPostForm.getFeedbackFromProps(newProps);\n            if (!feedback) {\n              throw new Error(\"Didn't receive feedback from props\");\n            }\n            if (newProps.createPost.response?.success) {\n              console.log(\n                'added post with id',\n                newProps.createPost.response.data.id\n              );\n            }\n            setFeedback(feedback);\n            if (feedback.state === 'success') {\n              setPosts(newProps.posts); // refresh posts\n              actions.resetForm();\n            }\n          } catch (error) {\n            setFeedback({\n              state: 'error',\n              error,\n            });\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form method=\"post\" action={props.createPost.endpoints.action}>\n            <ProgressBar loading={isSubmitting} />\n            <p className=\"field\">\n              <label htmlFor=\"from\">Name</label>\n              <br />\n              <Field type=\"text\" name=\"from\" disabled={isSubmitting} />\n              <br />\n              <ErrorMessage\n                name=\"from\"\n                component=\"span\"\n                className=\"field__error\"\n              />\n            </p>\n            <p className=\"field\">\n              <label htmlFor=\"message\">Message</label>\n              <br />\n              <Field\n                type=\"textarea\"\n                name=\"message\"\n                as=\"textarea\"\n                disabled={isSubmitting}\n              />\n              <br />\n              <ErrorMessage\n                name=\"message\"\n                component=\"span\"\n                className=\"field__error\"\n              />\n            </p>\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n\n            <br />\n            {feedback?.state === 'success' && (\n              <span className=\"feedback success\">\n                Yay! Your entry was added\n              </span>\n            )}\n\n            {feedback?.state === 'error' && (\n              <>\n                <span className=\"feedback error\">\n                  Something went wrong: {feedback.error.message}. Full Error:{' '}\n                  <pre>\n                    {JSON.stringify(\n                      {\n                        ...feedback.error,\n                        message: feedback.error.message,\n                        stack: feedback.error.stack,\n                      },\n                      null,\n                      4\n                    )}\n                  </pre>\n                </span>\n              </>\n            )}\n            {isSubmitting && <span className=\"feedback\">Loading...</span>}\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n}\n\nexport const getServerSideProps = async (ctx: GetServerSidePropsContext) => {\n  const createPostProps = await createPostForm.getPageProps({\n    ctx,\n    async mutation(input) {\n      if (Math.random() < 0.3) {\n        throw new Error('Emulating the mutation failing');\n      }\n      return DB.createPost(input);\n    },\n  });\n\n  return {\n    props: {\n      ...createPostProps,\n      posts: await DB.getAllPosts(),\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}